<?php

namespace AndraZero121\DocsHorizon\Helvetica;

use Illuminate\Support\Facades\File;

class FileGenerator
{
    public function createDocsApi(array $types): void
    {
        $resourcePath = resource_path('js/docs-api');
        
        // Buat direktori jika belum ada
        if (!File::exists($resourcePath)) {
            File::makeDirectory($resourcePath, 0755, true);
        }
        
        // Generate type definitions
        $this->generateTypeScript($types, $resourcePath);
        $this->generateJson($types, $resourcePath);
        $this->generateIndex($resourcePath);
    }
    
    private function generateTypeScript(array $types, string $path): void
    {
        $content = "// Auto-generated by Docs Horizon\n";
        $content .= "// Do not edit this file manually\n\n";
        
        foreach ($types as $tableName => $fields) {
            $interfaceName = $this->toPascalCase($tableName);
            $content .= "export interface {$interfaceName} {\n";
            
            foreach ($fields as $field => $type) {
                $tsType = $this->mapToTypeScript($type);
                $content .= "  {$field}: {$tsType};\n";
            }
            
            $content .= "}\n\n";
        }
        
        File::put($path . '/types.ts', $content);
    }
    
    private function generateJson(array $types, string $path): void
    {
        $jsonContent = json_encode($types, JSON_PRETTY_PRINT);
        File::put($path . '/schema.json', $jsonContent);
    }
    
    private function generateIndex(string $path): void
    {
        $content = "// Docs Horizon - Auto-generated exports\n";
        $content .= "export * from './types';\n";
        $content .= "export { default as schema } from './schema.json';\n";
        
        File::put($path . '/index.ts', $content);
    }
    
    private function toPascalCase(string $string): string
    {
        return str_replace(' ', '', ucwords(str_replace('_', ' ', $string)));
    }
    
    private function mapToTypeScript(string $phpType): string
    {
        return match($phpType) {
            'string' => 'string',
            'number', 'integer' => 'number',
            'boolean' => 'boolean',
            'array' => 'any[]',
            'object' => 'object',
            default => 'string'
        };
    }
}